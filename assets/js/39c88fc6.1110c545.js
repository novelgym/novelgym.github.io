"use strict";(self.webpackChunkng_website=self.webpackChunkng_website||[]).push([[133],{1463:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});var t=i(5893),s=i(1151);const c={sidebar_position:2},o="Creating Your Environment",r={id:"environment/custom",title:"Creating Your Environment",description:"In this section, we look at the polycraftgymmain.yaml config used in the following three files:",source:"@site/docs/environment/custom.md",sourceDirName:"environment",slug:"/environment/custom",permalink:"/docs/environment/custom",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Keyboard Demo",permalink:"/docs/environment/demo"},next:{title:"Implementing Novelties",permalink:"/docs/environment/novelty"}},l={},a=[{value:"Layout",id:"layout",level:2},{value:"Objects",id:"objects",level:2},{value:"Entities",id:"entities",level:2},{value:"Actions",id:"actions",level:2},{value:"Goal",id:"goal",level:2},{value:"Training",id:"training",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"creating-your-environment",children:"Creating Your Environment"}),"\n",(0,t.jsxs)(n.p,{children:["In this section, we look at the ",(0,t.jsx)(n.a,{href:"https://github.com/tufts-ai-robotics-group/NovelGym/blob/main/config/polycraft_gym_main.yaml",children:"polycraft_gym_main.yaml"})," config used in the following three files:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/tufts-ai-robotics-group/NovelGym/blob/main/manual_novelty_test1.py",children:"manual_novelty_test1.py"})," \u2013 keyboard agent with rendering,"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/tufts-ai-robotics-group/NovelGym/blob/main/manual_sanity_checker.py",children:"manual_sanity_checker.py"})," \u2013 loads trained model and sees what action it selects,"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/tufts-ai-robotics-group/NovelGym/blob/main/train.py",children:"train.py"})," \u2013 used for training."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Specifically, we explain how the environment can be modified using the config only, i.e. without having to write any code. Later sections cover what can be implemented from scratch:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["entities such as objects and actions (see ",(0,t.jsx)(n.a,{href:"objectsactions",children:"Examples of Objects & Actions"}),"),"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["spaces (see ",(0,t.jsx)(n.a,{href:"../agent/spaces",children:"Defining Spaces"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For details on how anything can become a novelty to the agent, see ",(0,t.jsx)(n.a,{href:"novelty",children:"Implementing Novelties"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"layout",children:"Layout"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"map_size"})}),"\n",(0,t.jsx)(n.p,{children:"Width and height in cells of the gridworld navigated by the agent."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"map_size: `[16, 16]`\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"rooms"})}),"\n",(0,t.jsx)(n.p,{children:"Coordinates of the upper-left and lower-right corner of each room. Where rooms overlap on a row or column, a wall with a door is created."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"rooms:\n  '1':\n    start: [0, 0]\n    end: [10, 10]\n  '2':\n    start: [10, 0]\n    end: [15, 15]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"objects",children:"Objects"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"object_types"})}),"\n",(0,t.jsx)(n.p,{children:"Source modules, break cost, and collect cost of the object types in the game."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"object_types:\n  tree_tap:\n    module: gym_novel_gridworlds2.contrib.polycraft.objects.TreeTap\n    collect_cost: 50000\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"objects"})}),"\n",(0,t.jsxs)(n.p,{children:["Quantity and location of the objects initially placed in the environment. The ",(0,t.jsx)(n.code,{children:"chunked"})," key set to ",(0,t.jsx)(n.code,{children:"True"})," places all objects of the same type next to each other."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"objects:\n  oak_log:\n    quantity: 5\n    room: 2\n    chunked: 'False'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"entities",children:"Entities"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"entities"})}),"\n",(0,t.jsx)(n.p,{children:"There are several subkeys to this key:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"agent"})," \u2013 source of behaviour for the agent:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"KeyboardAgent"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"RandomAgent"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["a more complex setting for an RL agent such as in ",(0,t.jsx)(n.a,{href:"https://github.com/tufts-ai-robotics-group/NovelGym/blob/main/config/polycraft_gym_rl.yaml",children:"config/polycraft_gym_rl.yaml"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["(see ",(0,t.jsx)(n.a,{href:"../agent/combining",children:"Combining Planning & RL Agents"})," for more detail on integrating intelligent agents),"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"entity"})," \u2013 source code of the agent,"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"id"})," \u2013 unique identifier of an entity, used in actions such as ",(0,t.jsx)(n.code,{children:"approach_entity_<id>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"action_set"})," \u2013 attributes to the entity one of the actions sets (multiple entities can share the same action set),"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"action_sets"})," \u2013 action sets available,"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"room"})," \u2013 the room the entity is placed in at the start of the game,"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"inventory"})," \u2013 what the entity has in their inventory at the start of the game (the inventory is variable throughout the game),"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"max_step_cost"})," \u2013 the maximum cost that can be incurred on an intelligent (non-keyboard, non-random) agent at any step."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"entities:\n  main_1:\n    agent: gym_novel_gridworlds2.agents.KeyboardAgent\n    name: entity.polycraft.Player.name\n    type: agent\n    entity: gym_novel_gridworlds2.contrib.polycraft.objects.PolycraftEntity\n    action_set: main\n    inventory:\n      iron_pickaxe: 1\n      tree_tap: 1\n    id: 0\n    room: 2\n    max_step_cost: 100000\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"trades"})}),"\n",(0,t.jsxs)(n.p,{children:["The input and output of a trade and the ",(0,t.jsx)(n.code,{children:"id"})," of the trader with whom this trade can be executed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"trades:\n  block_of_titanium_1:\n    input:\n      block_of_platinum: 1\n    output:\n      block_of_titanium: 1\n    trader:\n    - 103\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"auto_pickup_agents"})}),"\n",(0,t.jsx)(n.p,{children:"List of ids of those entities that are to automatically collect all objects around them at each time step."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"auto_pickup_agents:\n- 0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"actions"})}),"\n",(0,t.jsxs)(n.p,{children:["Source modules and step cost of actions in the environment. In the case of actions involving interactions with other agents, the ",(0,t.jsx)(n.code,{children:"entity_id"})," must be provided. Compound actions include"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"break_<object>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"approach_<object/entity>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"interact_<entity>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"select_<object>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"craft_<object>"}),","]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"trade_<object>"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Notice ",(0,t.jsx)(n.code,{children:"nop_placeholder"}),", a placeholder for a novelty action."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"actions:\n  break_block:\n    module: gym_novel_gridworlds2.contrib.polycraft.actions.Break\n    step_cost: 3600\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"action_sets"})}),"\n",(0,t.jsx)(n.p,{children:"Unique sets of actions that can be attributed to any entity. Any set of actions can be shared by entities."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"action_sets:\n  main:\n  - collect\n  - break_block\n  - approach_oak_log\n  - select_oak_log\n  - deselect_item\n  - craft_stick\n  - nop_placeholder1\n  - give_up\n"})}),"\n",(0,t.jsx)(n.h2,{id:"goal",children:"Goal"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"recipies"})}),"\n",(0,t.jsxs)(n.p,{children:["Input, output, and step cost of all the recipies the agent can craft. In the base implementation includes the recipe for the ",(0,t.jsx)(n.code,{children:"pogo_stick"}),", the goal craft of the game."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"recipies:\n  pogo_stick:\n    input:\n    - stick\n    - block_of_titanium\n    - stick\n    - diamond\n    - '0'\n    - '0'\n    - '0'\n    - rubber\n    - '0'\n    output:\n      pogo_stick: 1\n    step_cost: 8400\n"})}),"\n",(0,t.jsx)(n.h2,{id:"training",children:"Training"}),"\n",(0,t.jsx)(n.p,{children:"All of the below keys take integer values."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"sleep_time"})}),"\n",(0,t.jsx)(n.p,{children:"Time delay after each environment step when training."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"sleep_time: 0\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"time_limit"})}),"\n",(0,t.jsx)(n.p,{children:"Limit on how many steps the agent can take in attempting the goal during training."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"time_limit: 89000\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"seed"})}),"\n",(0,t.jsx)(n.p,{children:"For the reproducibility of the experiment run."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"seed: 23\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"num_episodes"})}),"\n",(0,t.jsx)(n.p,{children:"Number of episodes to run when training."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"num_episodes: 10\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(7294);const s={},c=t.createContext(s);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);